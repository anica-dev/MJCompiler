// generated with ast extension for cup
// version 0.8
// 14/8/2023 18:15:58


package rs.ac.bg.etf.pp1.ast;

public interface Visitor { 

    public void visit(Mulop Mulop);
    public void visit(Relop Relop);
    public void visit(TermList TermList);
    public void visit(Assignop Assignop);
    public void visit(FormalParamDecl FormalParamDecl);
    public void visit(MethTypeName MethTypeName);
    public void visit(StatementList StatementList);
    public void visit(Addop Addop);
    public void visit(DesignatorStatAssignopExpr DesignatorStatAssignopExpr);
    public void visit(Factor Factor);
    public void visit(CondTerm CondTerm);
    public void visit(DeclList DeclList);
    public void visit(Designator Designator);
    public void visit(Term Term);
    public void visit(Condition Condition);
    public void visit(ConstValue ConstValue);
    public void visit(ConstDeclList ConstDeclList);
    public void visit(VarDeclList VarDeclList);
    public void visit(FormalParamList FormalParamList);
    public void visit(ActPars ActPars);
    public void visit(DesignatorStatement DesignatorStatement);
    public void visit(Statement Statement);
    public void visit(CondFact CondFact);
    public void visit(MethodVarDeclList MethodVarDeclList);
    public void visit(MethodDeclList MethodDeclList);
    public void visit(ReturnStat ReturnStat);
    public void visit(ConstDeclarationList ConstDeclarationList);
    public void visit(SingleVarDecl SingleVarDecl);
    public void visit(SingleConstDecl SingleConstDecl);
    public void visit(FormPars FormPars);
    public void visit(Mod Mod);
    public void visit(Divide Divide);
    public void visit(Multiply Multiply);
    public void visit(Sub Sub);
    public void visit(Add Add);
    public void visit(LessEqual LessEqual);
    public void visit(Less Less);
    public void visit(GreaterEqual GreaterEqual);
    public void visit(Greater Greater);
    public void visit(NotEqual NotEqual);
    public void visit(CheckEqual CheckEqual);
    public void visit(AssignopDerived1 AssignopDerived1);
    public void visit(DesignatorArrName DesignatorArrName);
    public void visit(DesignatorArray DesignatorArray);
    public void visit(DesignatorNoArr DesignatorNoArr);
    public void visit(FactorExpr FactorExpr);
    public void visit(FactorNewExpr FactorNewExpr);
    public void visit(FactorBool FactorBool);
    public void visit(FactorChar FactorChar);
    public void visit(FactorNum FactorNum);
    public void visit(FactorDes FactorDes);
    public void visit(FuncCall FuncCall);
    public void visit(FuncCallArgs FuncCallArgs);
    public void visit(TermMulop TermMulop);
    public void visit(JustTerm JustTerm);
    public void visit(NegativeExpr NegativeExpr);
    public void visit(TermExpr TermExpr);
    public void visit(AddExpr AddExpr);
    public void visit(Expr Expr);
    public void visit(CondFactDoubleExpr CondFactDoubleExpr);
    public void visit(CondFactExpr CondFactExpr);
    public void visit(CondTermMultiple CondTermMultiple);
    public void visit(CondTermSingle CondTermSingle);
    public void visit(SingleCondition SingleCondition);
    public void visit(ConditionList ConditionList);
    public void visit(SingleActPar SingleActPar);
    public void visit(MoreActPars MoreActPars);
    public void visit(DesStatAssignopExprError DesStatAssignopExprError);
    public void visit(DesStatAssignopExpr DesStatAssignopExpr);
    public void visit(DesignatorStatDec DesignatorStatDec);
    public void visit(DesignatorStatInc DesignatorStatInc);
    public void visit(DesignatorStatMethodCallParams DesignatorStatMethodCallParams);
    public void visit(DesignatorStatMethodCall DesignatorStatMethodCall);
    public void visit(DesignatorStatAssign DesignatorStatAssign);
    public void visit(ReturnExpr ReturnExpr);
    public void visit(ReturnNoExpr ReturnNoExpr);
    public void visit(DesignatorFindAny DesignatorFindAny);
    public void visit(MoreStatements MoreStatements);
    public void visit(FindAnyStatement FindAnyStatement);
    public void visit(PrintStatementNum PrintStatementNum);
    public void visit(PrintStatement PrintStatement);
    public void visit(ReadStatement ReadStatement);
    public void visit(ReturnStatement ReturnStatement);
    public void visit(IfStatement IfStatement);
    public void visit(IfElseStatement IfElseStatement);
    public void visit(DesignatorStat DesignatorStat);
    public void visit(NoStmt NoStmt);
    public void visit(Statements Statements);
    public void visit(FormalParamArray FormalParamArray);
    public void visit(FormalParam FormalParam);
    public void visit(SingleFormalParamDecl SingleFormalParamDecl);
    public void visit(FormalParamDecls FormalParamDecls);
    public void visit(NoFormParam NoFormParam);
    public void visit(FormParams FormParams);
    public void visit(NoVarsDeclared NoVarsDeclared);
    public void visit(MethVarDeclars MethVarDeclars);
    public void visit(MethodName MethodName);
    public void visit(VoidMethodName VoidMethodName);
    public void visit(MethodTypeName MethodTypeName);
    public void visit(MethodDecl MethodDecl);
    public void visit(NoMethodDecl NoMethodDecl);
    public void visit(MethodDeclarations MethodDeclarations);
    public void visit(ConstBool ConstBool);
    public void visit(ConstChar ConstChar);
    public void visit(ConstNum ConstNum);
    public void visit(ConstDeclaration ConstDeclaration);
    public void visit(SingleConstDeclaration SingleConstDeclaration);
    public void visit(ConstantDeclList ConstantDeclList);
    public void visit(ConstDecl ConstDecl);
    public void visit(Type Type);
    public void visit(ErrorStmtSemi ErrorStmtSemi);
    public void visit(ArrayVarDecl ArrayVarDecl);
    public void visit(SingleVarDeclar SingleVarDeclar);
    public void visit(SingleVarDeclaration SingleVarDeclaration);
    public void visit(VarDeclarationList VarDeclarationList);
    public void visit(VarDecl VarDecl);
    public void visit(NoVarDecl NoVarDecl);
    public void visit(VarDeclarations VarDeclarations);
    public void visit(ConstDeclarations ConstDeclarations);
    public void visit(ProgName ProgName);
    public void visit(Program Program);

}
